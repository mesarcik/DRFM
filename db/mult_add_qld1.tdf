--altmult_add CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEVICE_FAMILY="MAX 10" DSP_BLOCK_BALANCING="Auto" INPUT_REGISTER_A0="UNREGISTERED" INPUT_REGISTER_B0="UNREGISTERED" MULTIPLIER_REGISTER0="UNREGISTERED" NUMBER_OF_MULTIPLIERS=1 OUTPUT_REGISTER="UNREGISTERED" port_addnsub1="PORT_UNUSED" port_signa="PORT_UNUSED" port_signb="PORT_UNUSED" REPRESENTATION_A="SIGNED" REPRESENTATION_B="SIGNED" WIDTH_A=17 WIDTH_B=18 WIDTH_RESULT=35 dataa datab result CARRY_CHAIN="MANUAL" CARRY_CHAIN_LENGTH=48
--VERSION_BEGIN 16.1 cbx_alt_ded_mult_y 2016:10:24:15:04:16:SJ cbx_altera_mult_add 2016:10:24:15:04:16:SJ cbx_altera_mult_add_rtl 2016:10:24:15:04:16:SJ cbx_altmult_add 2016:10:24:15:04:16:SJ cbx_cycloneii 2016:10:24:15:04:16:SJ cbx_lpm_add_sub 2016:10:24:15:04:16:SJ cbx_lpm_mult 2016:10:24:15:04:16:SJ cbx_mgl 2016:10:24:15:05:03:SJ cbx_nadder 2016:10:24:15:04:16:SJ cbx_padd 2016:10:24:15:04:16:SJ cbx_parallel_add 2016:10:24:15:04:16:SJ cbx_stratix 2016:10:24:15:04:16:SJ cbx_stratixii 2016:10:24:15:04:16:SJ cbx_util_mgl 2016:10:24:15:04:16:SJ  VERSION_END


-- Copyright (C) 2016  Intel Corporation. All rights reserved.
--  Your use of Intel Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Intel Program License 
--  Subscription Agreement, the Intel Quartus Prime License Agreement,
--  the Intel MegaCore Function License Agreement, or other 
--  applicable license agreement, including, without limitation, 
--  that your use is for the sole purpose of programming logic 
--  devices manufactured by Intel and sold by Intel or its 
--  authorized distributors.  Please refer to the applicable 
--  agreement for further details.


FUNCTION ded_mult_9p11 (dataa[16..0], datab[17..0])
RETURNS ( result[34..0]);

--synthesis_resources = dsp_9bit 2 
SUBDESIGN mult_add_qld1
( 
	dataa[16..0]	:	input;
	datab[17..0]	:	input;
	result[34..0]	:	output;
) 
VARIABLE 
	ded_mult1 : ded_mult_9p11;
	dataa_bus[16..0]	: WIRE;
	datab_bus[17..0]	: WIRE;
	pre_result[34..0]	: WIRE;

BEGIN 
	ded_mult1.dataa[] = ( dataa_bus[16..0]);
	ded_mult1.datab[] = ( datab_bus[17..0]);
	dataa_bus[] = ( dataa[16..0]);
	datab_bus[] = ( datab[17..0]);
	pre_result[34..0] = ded_mult1.result[34..0];
	result[34..0] = pre_result[34..0];
END;
--VALID FILE
